apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://ossrh-staging-api.central.sonatype.com/service/local/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://central.sonatype.com/repository/maven-snapshots/"
}

task androidJavadocs(type: Javadoc) {
    exclude "**/*.orig" // exclude files created by source control
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set("javadoc")

    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")

    from android.sourceSets.main.java.source
}

def logger(log) {
    println log
}

def configurePom(pom) {
    logger("configurePom")
    pom.name = POM_NAME
    pom.packaging = POM_PACKAGING
    pom.description = POM_DESCRIPTION
    pom.url = POM_URL

    pom.scm {
        url = POM_SCM_URL
        connection = POM_SCM_CONNECTION
        developerConnection = POM_SCM_DEV_CONNECTION
    }

    pom.licenses {
        license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
            distribution = POM_LICENCE_DIST
        }
    }

    pom.developers {
        developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                logger("release")
                // The coordinates of the library, being set from variables that
                // we'll set up in a moment
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                version VERSION_NAME

                // Two artifacts, the `aar` and the sources
                // artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
                artifact bundleReleaseAar
                artifact androidSourcesJar
                artifact androidJavadocsJar

                // Self-explanatory metadata for the most part
                pom {
                    configurePom(pom)
                    // A slight fix so that the generated POM will include any transitive dependencies
                    // that the library builds upon
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')

                        project.configurations.implementation.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

 signing {
     logger("signing")
     sign publishing.publications
 }

publish.dependsOn build
publishToMavenLocal.dependsOn build